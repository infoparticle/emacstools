# -*- mode: snippet -*-
# name: Java Facade Pattern
# key: m_pattern_facade
# group: Java Design Patterns (Structural)
# type: snippet
# --
// Facade Pattern
//
// Provides a unified interface to a set of interfaces in a subsystem.
// Defines a higher-level interface that makes the subsystem easier to use.

// Subsystem Component 1
class ${1:SubsystemOne} {
   public void ${2:operationOne}() {
       System.out.println("${3:Subsystem One Operation}");
   }
}

// Subsystem Component 2
class ${4:SubsystemTwo} {
   public void ${5:operationTwo}() {
       System.out.println("${6:Subsystem Two Operation}");
   }
}

// Subsystem Component 3
class ${7:SubsystemThree} {
   public void ${8:operationThree}() {
       System.out.println("${9:Subsystem Three Operation}");
   }
}

// Facade
class ${10:Facade} {
   private final $1 ${11:subsystemOne};
   private final $4 ${12:subsystemTwo};
   private final $7 ${13:subsystemThree};

   public $10() {
       $11 = new $1();
       $12 = new $4();
       $13 = new $7();
   }

   // Facade methods that simplify client interactions

   // Simplified operation that coordinates multiple subsystems
   public void ${14:operationA}() {
       System.out.println("${15:Facade Operation A}");
       $11.$2();
       $12.$5();
   }

   // Another simplified operation
   public void ${16:operationB}() {
       System.out.println("${17:Facade Operation B}");
       $11.$2();
       $13.$8();
   }
}

${0:// Usage example:
// // Client code only interacts with the facade
// $10 facade = new $10();
//
// // Use simplified interface
// facade.$14();
// facade.$16();
}
