# -*- mode: snippet -*-
# name: Python Segment Tree Implementation
# key: m_lc_segment_tree
# group: LeetCode Data Structures
# type: snippet
# --
class SegmentTree:
   def __init__(self, arr):
       self.n = len(arr)
       # Size of segment tree array
       self.size = 4 * self.n
       self.tree = [0] * self.size
       if self.n > 0:
           self._build(arr, 0, 0, self.n - 1)

   def _build(self, arr, node, start, end):
       # Leaf node
       if start == end:
           self.tree[node] = arr[start]
           return

       mid = (start + end) // 2
       # Build left and right children
       self._build(arr, 2 * node + 1, start, mid)
       self._build(arr, 2 * node + 2, mid + 1, end)

       # Update current node based on children
       self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]

   def update(self, index, value):
       if index < 0 or index >= self.n:
           return
       self._update(0, 0, self.n - 1, index, value)

   def _update(self, node, start, end, index, value):
       # Leaf node with the target index
       if start == end:
           self.tree[node] = value
           return

       mid = (start + end) // 2
       if index <= mid:
           # Update left subtree
           self._update(2 * node + 1, start, mid, index, value)
       else:
           # Update right subtree
           self._update(2 * node + 2, mid + 1, end, index, value)

       # Update current node based on children
       self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]

   def query(self, left, right):
       if left < 0 or right >= self.n or left > right:
           return 0
       return self._query(0, 0, self.n - 1, left, right)

   def _query(self, node, start, end, left, right):
       # No overlap
       if start > right or end < left:
           return 0

       # Complete overlap
       if start >= left and end <= right:
           return self.tree[node]

       # Partial overlap - query both children
       mid = (start + end) // 2
       left_sum = self._query(2 * node + 1, start, mid, left, right)
       right_sum = self._query(2 * node + 2, mid + 1, end, left, right)

       return left_sum + right_sum

# Usage
arr = [${1:1, 3, 5, 7, 9, 11}]
seg_tree = SegmentTree(arr)
total = seg_tree.query(${2:1}, ${3:3})  # Sum of range [1, 3]
seg_tree.update(${4:1}, ${5:10})  # Update value at index 1
${0:}
