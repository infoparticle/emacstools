# -*- mode: snippet -*-
# name: Python Union Find (Disjoint Set)
# key: m_lc_union_find
# group: LeetCode Data Structures
# type: snippet
# --
class UnionFind:
   def __init__(self, n):
       self.parent = list(range(n))
       self.rank = [0] * n
       self.count = n  # Number of connected components

   def find(self, x):
       if self.parent[x] != x:
           self.parent[x] = self.find(self.parent[x])  # Path compression
       return self.parent[x]

   def union(self, x, y):
       root_x = self.find(x)
       root_y = self.find(y)

       if root_x == root_y:
           return False

       # Union by rank
       if self.rank[root_x] < self.rank[root_y]:
           self.parent[root_x] = root_y
       elif self.rank[root_x] > self.rank[root_y]:
           self.parent[root_y] = root_x
       else:
           self.parent[root_y] = root_x
           self.rank[root_x] += 1

       self.count -= 1
       return True

   def connected(self, x, y):
       return self.find(x) == self.find(y)
${0:}
