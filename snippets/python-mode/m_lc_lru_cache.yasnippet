# -*- mode: snippet -*-
# name: Python LRU Cache Implementation
# key: m_lc_lru_cache
# group: LeetCode Data Structures
# type: snippet
# --
from collections import OrderedDict

class LRUCache:
   def __init__(self, capacity):
       self.capacity = capacity
       self.cache = OrderedDict()

   def get(self, key):
       if key not in self.cache:
           return -1

       # Move accessed item to end (most recently used)
       value = self.cache.pop(key)
       self.cache[key] = value
       return value

   def put(self, key, value):
       # Remove if key exists
       if key in self.cache:
           self.cache.pop(key)
       # If at capacity, remove least recently used (first item)
       elif len(self.cache) >= self.capacity:
           self.cache.popitem(last=False)

       # Add new item to the end (most recently used)
       self.cache[key] = value

# Usage
cache = LRUCache(${1:2})
cache.put(${2:1}, ${3:1})
value = cache.get(${4:1})
${0:}
