# -*- mode: snippet -*-
# name: Python Bellman-Ford Algorithm
# key: m_lc_bellman_ford
# group: LeetCode Graph Algorithms
# type: snippet
# --
def bellman_ford(graph, start, num_vertices):
   """
   Bellman-Ford algorithm for finding shortest paths from start node
   to all other nodes in a weighted graph. Can handle negative weights.

   Args:
       graph: List of edges represented as (u, v, w) where u is source,
              v is destination, and w is weight
       start: Starting node
       num_vertices: Number of vertices in the graph

   Returns:
       Dictionary mapping each node to its shortest distance from start,
       None if negative cycle exists
   """
   # Initialize distances dictionary
   distances = {node: float('infinity') for node in range(num_vertices)}
   distances[start] = 0

   # Relax all edges |V| - 1 times
   for _ in range(num_vertices - 1):
       for u, v, w in graph:
           if distances[u] != float('infinity') and distances[u] + w < distances[v]:
               distances[v] = distances[u] + w

   # Check for negative-weight cycles
   for u, v, w in graph:
       if distances[u] != float('infinity') and distances[u] + w < distances[v]:
           # Negative cycle exists
           return None

   return distances

# Example usage for weighted graph as edge list
edges = [
   (${1:0}, ${2:1}, ${3:-1}),  # Edge from 0 to 1 with weight -1
   (${4:0}, ${5:2}, ${6:4}),
   (${7:1}, ${8:2}, ${9:3}),
   (${10:1}, ${11:3}, ${12:2}),
   (${13:1}, ${14:4}, ${15:2}),
   (${16:3}, ${17:2}, ${18:5}),
   (${19:3}, ${20:1}, ${21:1}),
   (${22:4}, ${23:3}, ${24:-3})
]

# Number of vertices (0 to 4)
num_vertices = ${25:5}

# Find shortest paths from 0
shortest_distances = bellman_ford(edges, ${26:0}, num_vertices)
${0:}
