# -*- mode: snippet -*-
# name: Python DFS (Depth-First Search)
# key: m_lc_dfs
# group: LeetCode Graph Algorithms
# type: snippet
# --
def dfs(graph, start, visited=None):
   """
   Recursive Depth-First Search on a graph starting from node 'start'.
   Returns visited nodes in DFS order.

   Args:
       graph: Dictionary mapping nodes to lists of neighbors
       start: Starting node
       visited: Set of visited nodes (for recursion)
   """
   if visited is None:
       visited = set()

   visited.add(start)
   result = [start]

   for neighbor in graph[start]:
       if neighbor not in visited:
           result.extend(dfs(graph, neighbor, visited))

   return result

def dfs_iterative(graph, start):
   """
   Iterative Depth-First Search using a stack.

   Args:
       graph: Dictionary mapping nodes to lists of neighbors
       start: Starting node
   """
   visited = set()
   stack = [start]
   result = []

   while stack:
       node = stack.pop()
       if node not in visited:
           visited.add(node)
           result.append(node)

           # Add neighbors in reverse order for same visit order as recursive
           for neighbor in reversed(graph[node]):
               if neighbor not in visited:
                   stack.append(neighbor)

   return result

# Example usage for graph as adjacency list
graph = {
   ${1:0}: [${2:1, 2}],
   ${3:1}: [${4:0, 3, 4}],
   ${5:2}: [${6:0, 5}],
   ${7:3}: [${8:1}],
   ${9:4}: [${10:1}],
   ${11:5}: [${12:2}]
}

# DFS from node 0
result_recursive = dfs(graph, ${13:0})
result_iterative = dfs_iterative(graph, ${13:0})
${0:}
