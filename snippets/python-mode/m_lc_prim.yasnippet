# -*- mode: snippet -*-
# name: Python Prim's Algorithm (MST)
# key: m_lc_prim
# group: LeetCode Graph Algorithms
# type: snippet
# --
import heapq

def prim_mst(graph, start):
   """
   Prim's algorithm to find minimum spanning tree of an undirected graph.

   Args:
       graph: Dictionary mapping vertices to lists of (neighbor, weight) tuples
       start: Starting vertex

   Returns:
       List of edges in the MST
   """
   # Set to keep track of vertices in MST
   mst_set = set([start])

   # List to store edges in MST
   mst_edges = []

   # Priority queue of edges
   edges = [(weight, start, neighbor) for neighbor, weight in graph[start]]
   heapq.heapify(edges)

   # Process until all vertices are in MST
   while edges and len(mst_set) < len(graph):
       weight, u, v = heapq.heappop(edges)

       # Add vertex to MST if not already included
       if v not in mst_set:
           mst_set.add(v)
           mst_edges.append((u, v, weight))

           # Add all edges from the new vertex
           for neighbor, edge_weight in graph[v]:
               if neighbor not in mst_set:
                   heapq.heappush(edges, (edge_weight, v, neighbor))

   return mst_edges

# Example usage with weighted adjacency list
graph = {
   ${1:0}: [(${2:1}, ${3:10}), (${4:2}, ${5:6}), (${6:3}, ${7:5})],
   ${8:1}: [(${9:0}, ${10:10}), (${11:3}, ${12:15})],
   ${13:2}: [(${14:0}, ${15:6}), (${16:3}, ${17:4})],
   ${18:3}: [(${19:0}, ${20:5}), (${21:1}, ${22:15}), (${23:2}, ${24:4})]
}

mst_edges = prim_mst(graph, ${25:0})
${0:}
