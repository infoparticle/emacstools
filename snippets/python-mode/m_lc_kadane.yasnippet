# -*- mode: snippet -*-
# name: Python Kadane's Algorithm
# key: m_lc_kadane
# group: LeetCode Famous Algorithms
# type: snippet
# --
def kadane(nums):
   """
   Kadane's algorithm for finding maximum subarray sum.

   Args:
       nums: List of integers

   Returns:
       Maximum subarray sum
   """
   # Initialize variables
   max_so_far = float('-inf')  # Global maximum
   max_ending_here = 0         # Maximum ending at current position

   for num in nums:
       # Add current element to max_ending_here
       max_ending_here = max(num, max_ending_here + num)

       # Update max_so_far if needed
       max_so_far = max(max_so_far, max_ending_here)

   return max_so_far

# Kadane's algorithm with subarray tracking
def kadane_with_indices(nums):
   """
   Kadane's algorithm that also returns the subarray indices.

   Args:
       nums: List of integers

   Returns:
       Tuple of (maximum sum, start index, end index)
   """
   if not nums:
       return (0, -1, -1)

   max_so_far = nums[0]
   max_ending_here = nums[0]

   start = 0
   end = 0
   s = 0  # Potential start index

   for i in range(1, len(nums)):
       # If starting a new subarray is better
       if nums[i] > max_ending_here + nums[i]:
           max_ending_here = nums[i]
           s = i
       else:
           max_ending_here += nums[i]

       # Update max_so_far if needed
       if max_ending_here > max_so_far:
           max_so_far = max_ending_here
           start = s
           end = i

   return (max_so_far, start, end)

# Example
nums = [${1:-2, 1, -3, 4, -1, 2, 1, -5, 4}]
max_sum = kadane(nums)
max_sum_with_indices = kadane_with_indices(nums)
${0:}
