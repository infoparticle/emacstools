# -*- mode: snippet -*-
# name: Python BFS for Matrix/Grid
# key: m_lc_bfs_matrix
# group: LeetCode Graph Algorithms
# type: snippet
# --
from collections import deque

def bfs_matrix(matrix, start_row, start_col):
   """
   BFS traversal on a 2D matrix/grid.

   Args:
       matrix: 2D list representing the grid
       start_row, start_col: Starting coordinates
   """
   if not matrix or not matrix[0]:
       return []

   rows, cols = len(matrix), len(matrix[0])
   visited = set([(start_row, start_col)])
   queue = deque([(start_row, start_col)])
   result = []

   # Four directions: up, right, down, left
   directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]

   while queue:
       row, col = queue.popleft()
       result.append((row, col))

       # Explore all four directions
       for dr, dc in directions:
           new_row, new_col = row + dr, col + dc

           # Check if in bounds and not visited
           if (0 <= new_row < rows and 0 <= new_col < cols and
               (new_row, new_col) not in visited and
               matrix[new_row][new_col] ${1:!= 0}):  # Condition to traverse (e.g., not a wall)

               visited.add((new_row, new_col))
               queue.append((new_row, new_col))

   return result

# Example usage
matrix = [
   [${2:1, 1, 0, 1}],
   [${3:1, 1, 1, 0}],
   [${4:0, 0, 1, 1}],
   [${5:1, 0, 1, 1}]
]

path = bfs_matrix(matrix, ${6:0}, ${7:0})
${0:}
