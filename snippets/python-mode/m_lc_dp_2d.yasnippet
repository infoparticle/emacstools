# -*- mode: snippet -*-
# name: Python DP - 2D Table
# key: m_lc_dp_2d
# group: LeetCode DP Patterns
# type: snippet
# --
def solve_problem_2d(input1, input2):
   """
   Dynamic Programming with 2D table.

   Args:
       input1, input2: Problem inputs determining table dimensions
   """
   # Get dimensions
   m, n = ${1:len(input1)}, ${2:len(input2)}

   # Initialize 2D DP table
   dp = [[${3:initial_value} for _ in range(n + 1)] for _ in range(m + 1)]

   # Base case(s)
   for i in range(m + 1):
       dp[i][0] = ${4:base_case_i}
   for j in range(n + 1):
       dp[0][j] = ${5:base_case_j}

   # Fill the table
   for i in range(1, m + 1):
       for j in range(1, n + 1):
           dp[i][j] = ${6:dp_formula}

   # Return the final answer
   return dp[m][n]

# Example: Longest Common Subsequence
def longest_common_subsequence(text1, text2):
   m, n = len(text1), len(text2)

   # Initialize 2D DP table
   dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

   # Fill the table
   for i in range(1, m + 1):
       for j in range(1, n + 1):
           if text1[i - 1] == text2[j - 1]:
               dp[i][j] = dp[i - 1][j - 1] + 1
           else:
               dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

   return dp[m][n]

result = longest_common_subsequence("${7:abcde}", "${8:ace}")
${0:}
