# -*- mode: snippet -*-
# name: Python Floyd-Warshall Algorithm
# key: m_lc_floyd_warshall
# group: LeetCode Graph Algorithms
# type: snippet
# --
def floyd_warshall(graph):
   """
   Floyd-Warshall algorithm for finding shortest paths between
   all pairs of vertices in a weighted graph.

   Args:
       graph: 2D matrix where graph[i][j] is the weight from i to j,
              or float('infinity') if no direct edge exists

   Returns:
       2D matrix of shortest distances between all pairs of vertices
   """
   n = len(graph)

   # Initialize distances matrix as a copy of the graph
   dist = [row[:] for row in graph]

   # Consider each vertex as an intermediate
   for k in range(n):
       # Consider all pairs of vertices (i, j)
       for i in range(n):
           for j in range(n):
               # If going through k is shorter than direct path
               if dist[i][j] > dist[i][k] + dist[k][j]:
                   dist[i][j] = dist[i][k] + dist[k][j]

   # Check for negative cycles
   for i in range(n):
       if dist[i][i] < 0:
           # Negative cycle detected
           return None

   return dist

# Example usage with adjacency matrix
# Use float('infinity') for no edge, 0 for self-loops
INF = float('infinity')
graph = [
   [${1:0, 3, INF, 5}],       # Edges from vertex 0
   [${2:2, 0, INF, 4}],       # Edges from vertex 1
   [${3:INF, 1, 0, INF}],     # Edges from vertex 2
   [${4:INF, INF, 2, 0}]      # Edges from vertex 3
]

# Find all-pairs shortest paths
all_pairs_shortest = floyd_warshall(graph)
${0:}
