# -*- mode: snippet -*-
# name: Python DP - Edit Distance
# key: m_lc_dp_edit_distance
# group: LeetCode DP Patterns
# type: snippet
# --
def edit_distance(word1, word2):
   """
   Calculate the minimum number of operations to convert word1 to word2.
   Operations: insert, delete, replace.

   Args:
       word1, word2: Input strings

   Returns:
       Minimum edit distance
   """
   m, n = len(word1), len(word2)

   # Initialize DP table
   dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

   # Base cases: empty string to string requires i insertions
   for i in range(m + 1):
       dp[i][0] = i
   for j in range(n + 1):
       dp[0][j] = j

   # Fill the table
   for i in range(1, m + 1):
       for j in range(1, n + 1):
           # If characters match, no operation needed
           if word1[i - 1] == word2[j - 1]:
               dp[i][j] = dp[i - 1][j - 1]
           else:
               # Minimum of three operations:
               # 1. Replace: dp[i-1][j-1] + 1
               # 2. Delete: dp[i-1][j] + 1
               # 3. Insert: dp[i][j-1] + 1
               dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])

   return dp[m][n]

# Space-optimized version (using two rows)
def edit_distance_optimized(word1, word2):
   m, n = len(word1), len(word2)

   # Ensure word1 is the shorter string for optimization
   if m > n:
       word1, word2 = word2, word1
       m, n = n, m

   # Only need two rows: current and previous
   prev = list(range(n + 1))
   curr = [0] * (n + 1)

   for i in range(1, m + 1):
       curr[0] = i
       for j in range(1, n + 1):
           if word1[i - 1] == word2[j - 1]:
               curr[j] = prev[j - 1]
           else:
               curr[j] = 1 + min(prev[j - 1], prev[j], curr[j - 1])

       # Swap rows for next iteration
       prev, curr = curr, prev

   return prev[n]

# Example
word1 = "${1:horse}"
word2 = "${2:ros}"
distance = edit_distance(word1, word2)
distance_optimized = edit_distance_optimized(word1, word2)
${0:}
