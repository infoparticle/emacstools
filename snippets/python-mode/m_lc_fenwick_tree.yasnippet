# -*- mode: snippet -*-
# name: Python Fenwick Tree (Binary Indexed Tree)
# key: m_lc_fenwick_tree
# group: LeetCode Data Structures
# type: snippet
# --
class FenwickTree:
   def __init__(self, n):
       self.n = n
       self.bit = [0] * (n + 1)  # 1-indexed

   def update(self, i, delta):
       """Add delta to element at index i"""
       while i <= self.n:
           self.bit[i] += delta
           i += i & -i  # Add least significant bit

   def prefix_sum(self, i):
       """Get sum of elements from 1 to i"""
       res = 0
       while i > 0:
           res += self.bit[i]
           i -= i & -i  # Remove least significant bit
       return res

   def range_sum(self, left, right):
       """Get sum of elements from left to right (inclusive)"""
       return self.prefix_sum(right) - self.prefix_sum(left - 1)

   def build(self, arr):
       """Initialize the tree with an array (0-indexed)"""
       for i, val in enumerate(arr, 1):  # Convert to 1-indexed
           self.update(i, val)

# Usage
nums = [${1:1, 3, 5, 7, 9, 11}]
n = len(nums)
bit = FenwickTree(n)
bit.build(nums)
total = bit.range_sum(${2:1}, ${3:3})  # Sum of range [1, 3]
bit.update(${4:1}, ${5:10})  # Add 10 to element at index 1
${0:}
