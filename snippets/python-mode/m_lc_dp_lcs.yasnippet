# -*- mode: snippet -*-
# name: Python DP - Longest Common Subsequence
# key: m_lc_dp_lcs
# group: LeetCode DP Patterns
# type: snippet
# --
def longest_common_subsequence(text1, text2):
   """
   Find the length of the longest common subsequence between two strings.

   Args:
       text1, text2: Input strings

   Returns:
       Length of longest common subsequence
   """
   m, n = len(text1), len(text2)

   # Initialize 2D DP table
   dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

   # Fill the table
   for i in range(1, m + 1):
       for j in range(1, n + 1):
           if text1[i - 1] == text2[j - 1]:
               dp[i][j] = dp[i - 1][j - 1] + 1
           else:
               dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

   return dp[m][n]

# Space-optimized version (using two rows)
def longest_common_subsequence_optimized(text1, text2):
   m, n = len(text1), len(text2)

   # Ensure text1 is the shorter string for optimization
   if m > n:
       text1, text2 = text2, text1
       m, n = n, m

   # Only need two rows: current and previous
   prev = [0] * (n + 1)
   curr = [0] * (n + 1)

   for i in range(1, m + 1):
       for j in range(1, n + 1):
           if text1[i - 1] == text2[j - 1]:
               curr[j] = prev[j - 1] + 1
           else:
               curr[j] = max(prev[j], curr[j - 1])

       # Swap rows for next iteration
       prev, curr = curr, prev

   return prev[n]

# Example
text1 = "${1:abcde}"
text2 = "${2:ace}"
lcs_length = longest_common_subsequence(text1, text2)
lcs_length_optimized = longest_common_subsequence_optimized(text1, text2)
${0:}
