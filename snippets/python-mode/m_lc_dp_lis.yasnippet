# -*- mode: snippet -*-
# name: Python DP - Longest Increasing Subsequence
# key: m_lc_dp_lis
# group: LeetCode DP Patterns
# type: snippet
# --
def longest_increasing_subsequence(nums):
   """
   Find the length of the longest strictly increasing subsequence.

   Args:
       nums: List of integers

   Returns:
       Length of longest increasing subsequence
   """
   if not nums:
       return 0

   n = len(nums)
   # Initialize DP array, each element is at least a subsequence of length 1
   dp = [1] * n

   # Fill DP array
   for i in range(1, n):
       for j in range(i):
           if nums[i] > nums[j]:
               dp[i] = max(dp[i], dp[j] + 1)

   # Return maximum value in dp array
   return max(dp)

# Binary search approach - O(n log n)
def longest_increasing_subsequence_optimized(nums):
   if not nums:
       return 0

   # tails[i] = smallest ending value of all LIS of length i+1
   tails = []

   for num in nums:
       # Binary search to find position to insert/replace
       idx = bisect_left(tails, num)

       # If num is larger than any element in tails, append it
       if idx == len(tails):
           tails.append(num)
       # Otherwise, replace the element at idx with num
       else:
           tails[idx] = num

   # Length of tails is the length of LIS
   return len(tails)

from bisect import bisect_left

# Example
nums = [${1:10, 9, 2, 5, 3, 7, 101, 18}]
lis_length = longest_increasing_subsequence(nums)
lis_length_optimized = longest_increasing_subsequence_optimized(nums)
${0:}
