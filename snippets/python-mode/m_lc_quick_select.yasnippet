# -*- mode: snippet -*-
# name: Python Quick Select (Kth Smallest)
# key: m_lc_quick_select
# group: LeetCode Famous Algorithms
# type: snippet
# --
def quick_select(nums, k):
   """
   Find the kth smallest element in an unsorted array.
   Based on the partition method from quicksort.

   Args:
       nums: List of integers
       k: Position (1-based) of the element to find

   Returns:
       The kth smallest element
   """
   # Convert to 0-based index
   k = k - 1

   def partition(left, right, pivot_index):
       pivot = nums[pivot_index]
       # Move pivot to end
       nums[pivot_index], nums[right] = nums[right], nums[pivot_index]

       # Move all elements smaller than pivot to the left
       store_index = left
       for i in range(left, right):
           if nums[i] < pivot:
               nums[store_index], nums[i] = nums[i], nums[store_index]
               store_index += 1

       # Move pivot to its final place
       nums[right], nums[store_index] = nums[store_index], nums[right]

       return store_index

   def select(left, right):
       # If list contains only one element, return it
       if left == right:
           return nums[left]

       # Select random pivot
       import random
       pivot_index = random.randint(left, right)

       # Partition and get position of pivot
       pivot_index = partition(left, right, pivot_index)

       # If position matches k, return the value
       if k == pivot_index:
           return nums[k]
       # If k is less, search in left subarray
       elif k < pivot_index:
           return select(left, pivot_index - 1)
       # If k is greater, search in right subarray
       else:
           return select(pivot_index + 1, right)

   return select(0, len(nums) - 1)

# Example
nums = [${1:3, 2, 1, 5, 6, 4}]
k = ${2:2}  # Find the 2nd smallest element
kth_smallest = quick_select(nums, k)
${0:}
