# -*- mode: snippet -*-
# name: Python DFS for Matrix/Grid
# key: m_lc_dfs_matrix
# group: LeetCode Graph Algorithms
# type: snippet
# --
def dfs_matrix(matrix, row, col, visited=None):
   """
   Recursive DFS traversal on a 2D matrix/grid.

   Args:
       matrix: 2D list representing the grid
       row, col: Current coordinates
       visited: Set of visited coordinates (for recursion)
   """
   if not matrix or not matrix[0]:
       return []

   rows, cols = len(matrix), len(matrix[0])

   # Initialize visited set if not provided
   if visited is None:
       visited = set()

   # Base case: out of bounds or already visited or invalid cell
   if (row < 0 or row >= rows or col < 0 or col >= cols or
       (row, col) in visited or matrix[row][col] ${1:== 0}):  # Condition to avoid (e.g., a wall)
       return []

   # Mark as visited and add to result
   visited.add((row, col))
   result = [(row, col)]

   # Four directions: up, right, down, left
   directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]

   # Recursive calls for all four directions
   for dr, dc in directions:
       new_row, new_col = row + dr, col + dc
       result.extend(dfs_matrix(matrix, new_row, new_col, visited))

   return result

def dfs_matrix_iterative(matrix, start_row, start_col):
   """
   Iterative DFS traversal on a 2D matrix/grid using a stack.

   Args:
       matrix: 2D list representing the grid
       start_row, start_col: Starting coordinates
   """
   if not matrix or not matrix[0]:
       return []

   rows, cols = len(matrix), len(matrix[0])
   visited = set()
   stack = [(start_row, start_col)]
   result = []

   # Four directions: up, right, down, left
   directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]

   while stack:
       row, col = stack.pop()

       # Skip if already visited or invalid
       if (row < 0 or row >= rows or col < 0 or col >= cols or
           (row, col) in visited or matrix[row][col] ${1:== 0}):
           continue

       visited.add((row, col))
       result.append((row, col))

       # Add all valid neighbors to stack
       for dr, dc in directions:
           new_row, new_col = row + dr, col + dc
           stack.append((new_row, new_col))

   return result

# Example usage
matrix = [
   [${2:1, 1, 0, 1}],
   [${3:1, 1, 1, 0}],
   [${4:0, 0, 1, 1}],
   [${5:1, 0, 1, 1}]
]

path_recursive = dfs_matrix(matrix, ${6:0}, ${7:0})
path_iterative = dfs_matrix_iterative(matrix, ${6:0}, ${7:0})
${0:}
