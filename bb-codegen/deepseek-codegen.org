#+TITLE: Code Generator System
#+AUTHOR: Generated by AI
#+DATE: 2023-10-15

* Configuration
** bb.edn
#+begin_src clojure :tangle bb.edn
{:paths ["src"]
 :dependencies
 {selmer/selmer {:mvn/version "1.12.64"}
  org.clojure/java.jdbc {:mvn/version "0.7.12"}
  com.h2database/h2 {:mvn/version "2.2.224"}}}
#+end_src

* Core Modules
** Simple Generator (stdout only)
*** src/bb/simple.bb
#+begin_src clojure :tangle src/bb/simple.bb
(ns bb.simple
  (:require [clojure.edn :as edn]
            [selmer.parser :as selmer]))

(defn- render-template [template-path context]
  (selmer/render-file (str "templates/" template-path) context))

(defn -main [& args]
  (let [input (-> (first args) slurp edn/read-string)
        template (:template input)
        context (dissoc input :template)]
    (println (render-template template context))))
#+end_src

** Advanced Generator (filesystem operations)
*** src/bb/advanced.bb
#+begin_src clojure :tangle src/bb/advanced.bb
(ns bb.advanced
  (:require [clojure.edn :as edn]
            [clojure.java.io :as io]
            [selmer.parser :as selmer]
            [clojure.java.jdbc :as jdbc]))

(defn- create-directories! [path]
  (io/make-parents path)
  (println "Created directories for:" path))

(defn- render-and-save! [template-path output-path context]
  (let [content (selmer/render-file (str "templates/" template-path) context)]
    (spit output-path content)
    (println "Generated:" output-path)))

(defn- extract-dtos-from-db! [db-spec output-dir]
  (println "Connecting to database...")
  (let [tables (jdbc/query db-spec ["SELECT table_name FROM information_schema.tables"])]
    (doseq [{:keys [table_name]} tables]
      (let [output-path (str output-dir "/" table_name ".java")
            columns (jdbc/query db-spec [(str "SELECT column_name, data_type "
                                            "FROM information_schema.columns "
                                            "WHERE table_name = '" table_name "'")])]
        (render-and-save! "java/dto.selmer" output-path
                         {:className (str/capitalize table_name)
                          :columns columns})))))

(defn -main [& args]
  (let [config (-> (first args) slurp edn/read-string)]
    (case (:mode config)
      :filesystem
      (doseq [{:keys [template target context]} (:files config)]
        (let [full-context (merge config context)
              output-path (str (:output-dir config "generated") "/" target)]
          (create-directories! output-path)
          (render-and-save! template output-path full-context)))

      :database
      (extract-dtos-from-db! (:db config)
                            (:output-dir config "generated-dtos")))))
#+end_src

* Templates
** Java Singleton
*** templates/java/singleton.selmer
#+begin_src django :tangle templates/java/singleton.selmer
package {{ package }};

public class {{ className }} {
    private static {{ className }} instance;

    private {{ className }}() {}

    public static {{ className }} getInstance() {
        {% if lazy %}if (instance == null) {{% endif %}
            instance = new {{ className }}();
        {% if lazy %} } {% endif %}
        return instance;
    }
}
#+end_src

** Spring Boot Application
*** templates/springboot/Application.java.selmer
#+begin_src django :tangle templates/springboot/Application.java.selmer
package {{ package }};

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class {{ className }} {
    public static void main(String[] args) {
        SpringApplication.run({{ className }}.class, args);
    }
}
#+end_src

** Database DTO Template
*** templates/java/dto.selmer
#+begin_src django :tangle templates/java/dto.selmer
package {{ package }};

public class {{ className }} {
    {% for column in columns %}
    private {{ column.data_type|type_mapping }} {{ column.column_name }};
    {% endfor %}

    // Getters and setters
    {% for column in columns %}
    public {{ column.data_type|type_mapping }} get{{ column.column_name|capitalize }}() {
        return this.{{ column.column_name }};
    }

    public void set{{ column.column_name|capitalize }}({{ column.data_type|type_mapping }} {{ column.column_name }}) {
        this.{{ column.column_name }} = {{ column.column_name }};
    }
    {% endfor %}
}
#+end_src

* Example Configurations
** Simple Config (stdout)
*** examples/simple.edn
#+begin_src clojure :tangle examples/simple.edn
{:template "java/singleton.selmer"
 :package "com.example"
 :className "SingletonDemo"
 :lazy true}
#+end_src

** Advanced Config (filesystem)
*** examples/advanced.edn
#+begin_src clojure :tangle examples/advanced.edn
{:mode :filesystem
 :output-dir "target/generated-sources"
 :package "com.example"
 :files [
   {:template "springboot/Application.java.selmer"
    :target "Application.java"
    :context {:className "DemoApp"}}

   {:template "java/singleton.selmer"
    :target "SingletonInstance.java"
    :context {:className "GlobalConfig" :lazy true}}
 ]}
#+end_src

** Database Config
*** examples/database.edn
#+begin_src clojure :tangle examples/database.edn
{:mode :database
 :output-dir "target/generated-dtos"
 :package "com.example.models"
 :db {:subprotocol "h2"
      :subname "mem:testdb"
      :user "sa"
      :password ""}}
#+end_src

* Usage
** Simple Generator
#+begin_src sh
bb -m bb.simple examples/simple.edn
#+end_src

** Advanced Generator (Files)
#+begin_src sh
bb -m bb.advanced examples/advanced.edn
#+end_src

** Advanced Generator (Database)
#+begin_src sh
bb -m bb.advanced examples/database.edn
#+end_src
